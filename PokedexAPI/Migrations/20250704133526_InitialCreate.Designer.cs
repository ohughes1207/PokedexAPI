// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokedexAPI.Data;

#nullable disable

namespace PokedexAPI.Migrations
{
    [DbContext(typeof(PokedexContext))]
    [Migration("20250704133526_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokedexAPI.Models.PokemonBase", b =>
                {
                    b.Property<int>("BaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BaseId"));

                    b.Property<string>("BaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Generation")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLegendary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMythical")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParadox")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPseudoLegendary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUltrabeast")
                        .HasColumnType("boolean");

                    b.Property<int>("PokedexNum")
                        .HasColumnType("integer");

                    b.HasKey("BaseId");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokedexAPI.Models.PokemonType", b =>
                {
                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.Property<float>("DefVsBug")
                        .HasColumnType("real");

                    b.Property<float>("DefVsDark")
                        .HasColumnType("real");

                    b.Property<float>("DefVsDragon")
                        .HasColumnType("real");

                    b.Property<float>("DefVsElectric")
                        .HasColumnType("real");

                    b.Property<float>("DefVsFairy")
                        .HasColumnType("real");

                    b.Property<float>("DefVsFighting")
                        .HasColumnType("real");

                    b.Property<float>("DefVsFire")
                        .HasColumnType("real");

                    b.Property<float>("DefVsFlying")
                        .HasColumnType("real");

                    b.Property<float>("DefVsGhost")
                        .HasColumnType("real");

                    b.Property<float>("DefVsGrass")
                        .HasColumnType("real");

                    b.Property<float>("DefVsGround")
                        .HasColumnType("real");

                    b.Property<float>("DefVsIce")
                        .HasColumnType("real");

                    b.Property<float>("DefVsNormal")
                        .HasColumnType("real");

                    b.Property<float>("DefVsPoison")
                        .HasColumnType("real");

                    b.Property<float>("DefVsPsychic")
                        .HasColumnType("real");

                    b.Property<float>("DefVsRock")
                        .HasColumnType("real");

                    b.Property<float>("DefVsSteel")
                        .HasColumnType("real");

                    b.Property<float>("DefVsWater")
                        .HasColumnType("real");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("TypeName");

                    b.ToTable("PokemonTypes");
                });

            modelBuilder.Entity("PokedexAPI.Models.PokemonVariant", b =>
                {
                    b.Property<int>("VarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VarId"));

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int>("Defense")
                        .HasColumnType("integer");

                    b.Property<int>("HP")
                        .HasColumnType("integer");

                    b.Property<string>("ImgName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMega")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRegional")
                        .HasColumnType("boolean");

                    b.Property<int>("PokedexNum")
                        .HasColumnType("integer");

                    b.Property<int>("SPAttack")
                        .HasColumnType("integer");

                    b.Property<int>("SPDefense")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<int>("TotalStats")
                        .HasColumnType("integer");

                    b.Property<string>("Type1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type2")
                        .HasColumnType("text");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VarId");

                    b.HasIndex("PokedexNum");

                    b.HasIndex("Type1");

                    b.HasIndex("Type2");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("PokedexAPI.Models.PokemonVariant", b =>
                {
                    b.HasOne("PokedexAPI.Models.PokemonBase", "BasePokemon")
                        .WithMany("Variants")
                        .HasForeignKey("PokedexNum")
                        .HasPrincipalKey("PokedexNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokedexAPI.Models.PokemonType", "Type1Rel")
                        .WithMany()
                        .HasForeignKey("Type1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokedexAPI.Models.PokemonType", "Type2Rel")
                        .WithMany()
                        .HasForeignKey("Type2")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BasePokemon");

                    b.Navigation("Type1Rel");

                    b.Navigation("Type2Rel");
                });

            modelBuilder.Entity("PokedexAPI.Models.PokemonBase", b =>
                {
                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
